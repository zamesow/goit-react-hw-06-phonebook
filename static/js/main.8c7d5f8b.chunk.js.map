{"version":3,"sources":["components/Filter/Filter.module.css","App.module.css","redux/contact/contact-actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contact/contact-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","addContact","createAction","state","payload","id","shortid","generate","name","number","deleteContact","changeFilter","ContactForm","handleNameChange","e","value","currentTarget","setState","handleNumberChange","handleSubmit","preventDefault","props","onSubmit","reset","this","className","mc","ContactForm__form","ContactForm__subtitle","ContactForm__text","type","onChange","Component","connect","dispatch","contactActions","getVisibleContacts","contacts","filter","normalizedFilter","toLowerCase","includes","onDelete","children","ContactList","ContactList__form","map","contact","deleteBtn","onClick","filterProp","target","FeilterForm__text","App","title","formSubmitHandler","console","log","actions","createReducer","_","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","reducers","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c7d5f8b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"FilterForm__text\":\"Filter_FilterForm__text__35ri2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"code\":\"App_code__3er7u\",\"title\":\"App_title__3LNS-\"};","import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction('contact/add', state => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name: state.name,\r\n    number: state.number,\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction('contact/delete');\r\n\r\nconst changeFilter = createAction('contact/changeFilter');\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n\r\n// ? // note 4. index.js -> создаём actions\r\n// - объект с обязательными свойствами {type: '', payload: ''}\r\n// - экспортируем его -> index.js\r\n// - можно попробовать с myAction2\r\n\r\n// ? // note 7. делаем action creator - фабрику экшинов - ф-цию, где параметр запишется в значение свойства\r\n\r\n// export const myAction = {\r\n//   type: 'MY_ACTION',\r\n//   payload: 'super payload',\r\n// };\r\n\r\n// export const myAction2 = value => ({\r\n//   type: 'MY_ACTION_2',\r\n//   payload: value,\r\n// });\r\n\r\n// * actions for phonebook\r\n// ? // note 8. создаём action для submit формы\r\n// - type: указываем namespace - типа заглавие области, где будет выполняться action (contactForm/submit)\r\n// - payload: будет динамическим\r\n// - лучше под разные действия делать отдельные action\r\n// - делаем reducer -> store\r\n\r\n// меняем actions.js на contact-actions.js\r\n\r\n// ? // note 22. import types\r\n// - ставим динамические типы\r\n// - экспортируем наш action как объект, потому что он должен распыляться в массив как объект, а не как переменная\r\n\r\n// ? // note 28. deleteContact\r\n// - ожидаем contactId, потому что в App -> deleteContact = contactId => {}\r\n// -- нам нужна лишь минимальная инф. для обновления, а обновляет reducer ->\r\n// -- export default { addContact, deleteContact };\r\n\r\n// ? // note 29. changeFilter\r\n// - обрабатывать будем значение\r\n// - export default { addContact, deleteContact, changeFilter };\r\n\r\n// ? // note 35. createAction @reduxjs/toolkit\r\n// import { createAction } from '@reduxjs/toolkit';\r\n// createAction(type, prepareAction?) - передаём в ф-цию //* type\r\n// - delete\r\n// -- const changeFilter = createAction(types.DELETE);\r\n// --- payload тут не нужен, потому что мы и так закидываем всю ф-цию (contactId там есть, потому что мы диспатчим id из ContactList)\r\n// - filter\r\n// -- const changeFilter = createAction(types.CHANGE_FILTER);\r\n// --- payload тут не нужен (value там есть итак, потому что мы диспатчим value из Filter)\r\n// - add\r\n// -- const changeFilter = createAction(types.ADD, prepareAction);\r\n// --- тут сложнее, name и number есть, а генератора id нет\r\n// --- используем 2й параметр [prepareAction] - на его место передаём ф-цию с подготовленым форматом //* payload\r\n// --- prepare callback - preload, легко и просто использовать потом, например при вызове console.log(addContact({ name: 'Azis', number: 123 }));\r\n// - types можо теперь не хранить, он прописываются один раз в createAction(type)\r\n\r\n// * старое\r\n// export const addName = value => ({\r\n//   type: types.ADD_NAME,\r\n//   payload: value,\r\n// });\r\n\r\n// export const addNumber = value => ({\r\n//   type: types.ADD_NUMBER,\r\n//   payload: value,\r\n// });\r\n\r\n// const addContact = state => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name: state.name,\r\n//     number: state.number,\r\n//   },\r\n// });\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactActions from '../../redux/contact/contact-actions';\r\nimport mc from './ContactForm.module.css';\r\n\r\nexport class ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleNameChange = e => {\r\n    const { value } = e.currentTarget;\r\n    this.setState({ name: value });\r\n  };\r\n\r\n  handleNumberChange = e => {\r\n    const { value } = e.currentTarget;\r\n    this.setState({ number: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onSubmit(this.state);\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    // const { handleNumberChange, handleNameChange } = this.props;\r\n\r\n    return (\r\n      <div className={mc.ContactForm}>\r\n        <form className={mc.ContactForm__form} onSubmit={this.handleSubmit}>\r\n          <label className={mc.ContactForm__subtitle}>\r\n            Name\r\n            <input\r\n              className={mc.ContactForm__text}\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={this.handleNameChange}\r\n            />\r\n          </label>\r\n          <label className={mc.ContactForm__subtitle}>\r\n            Number\r\n            <input\r\n              className={mc.ContactForm__text}\r\n              type=\"text\"\r\n              value={number}\r\n              onChange={this.handleNumberChange}\r\n            />\r\n          </label>\r\n          <button type=\"submit\">Add contact</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: state => dispatch(contactActions.addContact(state)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n\r\n// ? // note 11. connect()()\r\n// - убираем state и методы связанные с ним\r\n// - убираем класс и делаем ф-цию с нашей разметкой\r\n// - import { connect } from 'react-redux';\r\n// - делаем 2й export default connect()(ContactForm);\r\n// -- connect() - мы передаём туда опции для связи компонента и redux-хранилища mapStateToProps\r\n// -- потом connect() возвращает на своё место ещё одну ф-цию, которая ожидает компонент и настройки, которые мы передадим в ContactForm, чтоб их связать\r\n// --- эта запись идентична const a = x => y => x + y;\r\n// --- или a = x => { return y => { return x + y } };\r\n// --- или a(2)(3); // 5\r\n// - не коннектить один родитель, прокидывая всё вглубь, коннектить каждый компонент, которому что-то нужно (в разумных пределах, счётчику counter не подключать каждый маленький кусочек к store, подключать один counter и кинуть на один уровень вложности, а коллекции типа to-do подключать отдельно коллкции, формы, статистику и т.п.)\r\n\r\n// ? // note 12. mapStateToProps\r\n// - функция получает весь наш state, а возвращает назначенные нами свойства, которые станут пропсами компонента\r\n// -- return { nameProp: state.name, numberProp: state.number };\r\n// -- state.name и state.number - это те, что записаны в store, но мы можем добавить новые свойства\r\n// -- изменится state - изменится prop - перерендерится компонент\r\n// -- передаём connect(mapStateToProps), теперь функции ContactForm() переданы все пропсы, но в формах value={state.name} и value={state.number}, потому что это динамика, а не значения изначального state\r\n// ** не нужен в домашке\r\n\r\n// ? // note 13. mapDispatchToProps\r\n// - в его параметр приходит весь dispatch\r\n// - а возвращает объект с пропсами, значения которых будут ф-ции, которые будут диспатчить action\r\n// -- import * as actions - импортируем все экспорты как локальный объект actions и вызываем как функции\r\n// --- { handleNameChange: () => dispatch(actions.addName()),\r\n// --- handlePhoneChange: () => dispatch(actions.addNumber()), }\r\n// -- закидываем нашу функцию тоже в connect()\r\n// --- connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n// --- деструктуризируем свойства в ContactForm({}) вместе с другими пропсами\r\n// --- подставляем нужный проп в свой onChange={handleNameChange} и value={nameProp}\r\n// -> store\r\n\r\n// ? // note 27. dispatch onSubmit\r\n// - чтобы форма заполнялась, не нужно удялять месный state и методы связанные с ним\r\n// - этому state нет места в redux, потому что он используется только тут\r\n// - нам нужно засабмитить в state redux данные с помощью // * mapDispatchToProps\r\n// -- импортируем contactActions\r\n// -- импорт {connect}\r\n// - нам не нужен стейт в этом классе, а только проп onSubmit\r\n// - не используем mapStateToProps, поэтому null, пишем connect(null, mapDispatchToProps)\r\n\r\n// -- const mapDispatchToProps = dispatch => ({\r\n// --- onSubmit: state => dispatch(contactActions.addContact(state)) });\r\n// --- onSubmit - такой проп ожидает // * handleSubmit = e => { this.props.onSubmit(this.state); }\r\n// --- мы диспатчим state в contactActions.addContact(state) - это тот state из this.props.onSubmit(this.state)\r\n// - проверяем в redux devtools -> state\r\n\r\n// * старое\r\n\r\n// const mapStateToProps = state => {\r\n//   console.log('ContactForm:', state);\r\n//   return {\r\n//     nameProp: 'state.rootReducer.name',\r\n//     numberProp: 'state.rootReducer.number',\r\n//   };\r\n// };\r\n\r\n// state = {\r\n//   name: '',\r\n//   number: '',\r\n// };\r\n\r\n// handleNameChange = e => {\r\n//   const { value } = e.currentTarget;\r\n//   this.setState({ name: value });\r\n// };\r\n\r\n// handlePhoneChange = e => {\r\n//   const { value } = e.currentTarget;\r\n//   this.setState({ number: value });\r\n// };\r\n\r\n// handleSubmit = e => {\r\n//   e.preventDefault();\r\n\r\n//   this.props.onSubmitProp(this.state);\r\n\r\n//   this.reset();\r\n// };\r\n\r\n// reset = () => {\r\n//   this.setState({ name: '', number: '' });\r\n// };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactActions from '../../redux/contact/contact-actions';\r\nimport mc from './ContactList.module.css';\r\n\r\nfunction ContactList({ contacts, onDelete, children }) {\r\n  return (\r\n    <div className={mc.ContactList}>\r\n      {children}\r\n      <ul className={mc.ContactList__form}>\r\n        {contacts.map(({ id, number, name }) => {\r\n          return (\r\n            <li key={id} className={mc.contact}>\r\n              {name}: {number}\r\n              <button\r\n                className={mc.deleteBtn}\r\n                type=\"button\"\r\n                onClick={() => onDelete(id)}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  // onDelete: PropTypes.array.isRequired,\r\n  children: PropTypes.element.isRequired,\r\n};\r\n\r\nconst getVisibleContacts = (contacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(\r\n    ({ name, number }) =>\r\n      name.toLowerCase().includes(normalizedFilter) || number.includes(filter),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts, filter }) => ({\r\n  contacts: getVisibleContacts(contacts, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDelete: id => dispatch(contactActions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n// ? // note 28. dispatch onDelete\r\n// - import {connect}\r\n// - const mapStateToProps\r\n// -- наш список ожидает проп ContactList({ contacts })\r\n// --- в mapStateToProps пишем свойство 'contacts: state.contacts', (значение проверяем в redux (где лежит наш массив?))\r\n// - import action\r\n// - const mapDispatchToProp\r\n// -- в mapDispatchToProp мы можем прописать болванку onDelete: () => null,\r\n// --- onDelete должен принимать (id)\r\n// --- onDelete: id => dispatch(contactActions.deleteContact(id)),\r\n// - проверяем в redux\r\n\r\n// ? // note 32. getVisibleContacts\r\n// - делать фильтрацию нужно тут, где список\r\n// - рефакторим код\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactActions from '../../redux/contact/contact-actions';\r\nimport mc from './Filter.module.css';\r\n\r\nconst Filter = ({ value, filterProp }) => (\r\n  <label className={mc.ContactForm}>\r\n    Find contacts by name\r\n    <input\r\n      className={mc.FeilterForm__text}\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={filterProp}\r\n    />\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  filterProp: e => dispatch(contactActions.changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\n// ? // note 31. filter\r\n// - mapStateToProps\r\n// -- value: state.filter,\r\n// - import action\r\n// -- mapDispatchToProps\r\n// -- filterProp: e => dispatch(contactActions.changeFilter(e.target.value)),\r\n// - import {connect}\r\n// -- export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContactList';\r\nimport Filter from './components/Filter';\r\nimport mc from './App.module.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1 className={mc.title}>Phonebook</h1>\r\n        <ContactForm onSubmit={this.formSubmitHandler} />\r\n\r\n        <h2 className={mc.title}>Contacts</h2>\r\n        <ContactList>\r\n          <Filter />\r\n        </ContactList>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n// ? npm install redux\r\n// https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd\r\n// npm install --save-dev redux-devtools-extension [01:03:00]\r\n// - redux - это либа управления состояниями, там хранят коллекции данных, которые нужны глобально\r\n// - при обновлении state все компоненты получают новые пропсы\r\n// - state выносится отдельно\r\n// - не нужно перекидывать state и props, всё хранится в одном месте\r\n\r\n// ? // note 1. store (хранилище) - обычный js-объект\r\n// - создаём папку src/redux (вся логика приложения будет храниться тут)\r\n// -- redux/store.js -> ...\r\n\r\n// ? // note 25. убираем лишнее\r\n// - componentDidMount\r\n// - componentDidUpdate\r\n// - localStorage\r\n// - state = { contacts, filter }\r\n// -- если в state есть что-то для UI, то оставляем это, а работа с коллекцией уезжает в redux\r\n// - filter можно временно отключить\r\n// * formSubmitHandler\r\n// * убираем App -> deleteContact и рендерим\r\n// -- раньше он получал пропсы из App, а теперь будет брать из redux\r\n// -- удаляем пропсы contacts и onDelete\r\n// -> ContactList\r\n// *- getVisibleContacts\r\n// - делаем в -> ContactList\r\n\r\n// ? // note 26. проверка submit\r\n// - нужно проверить сабмитится ли наша форма\r\n// - наша форма - это action с types.ADD и с payload всех свойств контакта\r\n// - для этого нужно связать форму и action\r\n// -> ContactForm\r\n\r\n// * старое\r\n// state = {\r\n//   contacts: [\r\n//     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n//   ],\r\n//   filter: '',\r\n// };\r\n\r\n// запись в state из localStorage\r\n// componentDidMount() {\r\n//   const contacts = localStorage.getItem('contacts');\r\n//   const parsedContacts = JSON.parse(contacts);\r\n\r\n//   if (parsedContacts) {\r\n//     this.setState({ contacts: parsedContacts });\r\n//   }\r\n// }\r\n\r\n// запись в localStorage\r\n// componentDidUpdate(prevProps, prevState) {\r\n//   if (prevState.contacts !== this.state.contacts) {\r\n//     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n//   }\r\n// }\r\n\r\n// formSubmitHandler = data => {\r\n//   const { name, number } = data;\r\n//   const { contacts } = this.state;\r\n\r\n//   if (data.name.length === 0) {\r\n//     alert('Введите имя');\r\n//   } else if (data.number.length === 0) {\r\n//     alert('Введите номер телефона');\r\n//   } else if (\r\n//     contacts.find(\r\n//       contact => contact.name.toLocaleLowerCase() === name.toLowerCase(),\r\n//     )\r\n//   ) {\r\n//     alert(`${data.name} is already in contacts.`);\r\n//   } else if (contacts.find(contact => contact.number === number)) {\r\n//     alert(`${number} is already in contacts.`);\r\n//   } else {\r\n//     this.setState(prevState => ({\r\n//       contacts: [\r\n//         {\r\n//           ...data,\r\n//           id: shortid.generate(),\r\n//         },\r\n//         ...prevState.contacts,\r\n//       ],\r\n//     }));\r\n//   }\r\n// };\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contact-actions';\r\n\r\nconst initialState = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\n\r\nconsole.log(actions.addContact.type);\r\n\r\nconst contact = createReducer(initialState, {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default {\r\n  contact,\r\n  filter,\r\n};\r\n\r\n// ? // note 19. вынос actionTypes\r\n// - если мы используем switch(type) {case 'contact/Name'}, то type лучше хранить отдельно как переменную\r\n// -> contact-types.js\r\n// -> contact-actions\r\n\r\n// ? // note 20. contact-reducer\r\n// - нужно, прописать редьюсеры для каждого свойства state\r\n// - потом объеденить их в общее свойство-объект (если он есть) с помощью combineReducers({})\r\n// -- import { combineReducers } from 'redux';\r\n// -- у нас {contacts и filter} в одном\r\n// --- делаем сначала шаблоны-болванки, чтобы легче связать\r\n// ---- const contact = (state = [], action) => state;\r\n// ---- const filter = (state = '', action) => state;\r\n// --- экспортируем их в общем объекте в store ->\r\n// ---- там связываем с помощью combineReducers({})\r\n// ---- если есть ещё глубина, то редьюсим и связываем тут\r\n\r\n// ? // note 21. actionTypes (удалены при redux/toolkit)\r\n// export default { ADD: 'contact/add', DELETE: 'contact/delete',  CHANGE_FILTER: 'contact/changeFilter', }\r\n// - писать можноо большими и маленькими\r\n// - можно делать export каждого элемента const\r\n// - export default {} всего объекта\r\n\r\n// ? // note 23. contact-reduser switch-case\r\n// - редьюсим подробно contact = (state = [], { type, payload }) => {\r\n// -- switch(type) {\r\n// *- case 'types.ADD':\r\n// -- return [...state, payload];\r\n// -- default: return state; }};\r\n// *- case 'types.DELETE':\r\n// -- нужно взять предыдущие контакты, отфильтровать их и выбрать не соответствующие выбранному contact.id\r\n// --- это уже прописано в методе App -> deleteContact - contacts: contacts.filter(contact => contact.id !== contactId),\r\n// --- наш предыдущий state = []\r\n// ---- return state.filter(contact => contact.id !== payload);\r\n// ---- return state.filter(({id}) => id !== payload);\r\n// - убираем App -> deleteContact и рендерим ContactList\r\n\r\n// ? // note 30. reducer filter\r\n// - расписываем редьюсер фильтра\r\n\r\n// ? // note 36. createReducer @reduxjs/toolkit\r\n// import { createReducer } from '@reduxjs/toolkit';\r\n// - createReducer(state, { cases }), state = [], '' или переменная\r\n// - сначала закидываем наш state\r\n// - потом объект кейсов\r\n// -- type: (state, action) => return\r\n// -- тут уже можно писать 'state' в даном случае под капотом оно понимает что это\r\n// --- но если изначально state = '', то далее state определяется линтером, как неопределённая переменная, поэтому можно использовать _ - это не ошибка\r\n// -- default: return прописывать не нужно, он под капотом\r\n// -- если формулы большие, их можно выносить отдельно\r\n\r\n// ? // note 37. types @reduxjs/toolkit\r\n// - types тепрь не нужны, прописываем 1 раз в actions\r\n// - import actions from './contact-actions';\r\n// -- есть внутреннее свойство type прямо в нашей переменной и это строка\r\n// -- console.log(actions.addContact.type) там под капотом toString()\r\n// -- ключ у свойств объектов всегда строка, поэтому пишем [actions.addContact]:\r\n\r\n// ? // note 38. total-completed-reduce @reduxjs/toolkit\r\n// - эти опции есть в to-do Stats и используются для mapStateToProps\r\n// - коннектим Stats\r\n// * Вариант-1\r\n// - { total: state.todos.items.length\r\n// -   completed: state.todos.items.reduce((total, todo) => (todo.completed ? total + 1 : total), 0) }\r\n// * Вариант-2\r\n// - const getCompletedTodosCount = todos => todos.reduce((total, todo) => (todo.completed ? total + 1 : total), 0);\r\n// - completed: getCompletedTodosCount(state.todos.items)\r\n// reduce проверяет все todo на [comleted: true] и от total=0 делает +1 или выдыёт их total\r\n\r\n// ***\r\n// const filterReducer = combineReducers({\r\n//   filter,\r\n// });\r\n\r\n// *\r\n// const contactHandleInitialState = {\r\n//   name: '',\r\n//   number: '',\r\n// };\r\n\r\n// const contactHandleReducer = (\r\n//   state = contactHandleInitialState,\r\n//   { type, payload },\r\n// ) => {\r\n//   switch (type) {\r\n//     case 'contactForm/Name':\r\n//       return { name: payload };\r\n\r\n//     case 'contactForm/Number':\r\n//       return { number: payload };\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default combineReducers({\r\n//   handleContact: contactHandleInitialState,\r\n// });\r\n\r\n// const contact = (state = initialState, { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport reducers from './contact/contact-reducer';\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: reducers.contact,\r\n    filter: reducers.filter,\r\n  },\r\n  middleware,\r\n  // eslint-disable-next-line no-undef\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n\r\n('---');\r\n// ? // note 2. import { createStore } from 'redux';\r\n// - const reduser - ф-ция, что принимает предыдущее состояние (например state = {a: 5, b: 15}) и действие, возвращает новое состояние [prevState + action = newState]\r\n// - const store\r\n// - export default store; -> index.js\r\n\r\n// createStore(reducer, preloadedStore, enhancer);\r\n// preloadedStore - начальное состояние, например {a: 10}, можно из localStorage взять инфу и закинуть в него [дополнительный параметр]\r\n// enhancer - улучшайзер, обработчик действий до попадания в reducer [дополнительный параметр]\r\n\r\n// ? // note 6. проверка доставки action to reduce\r\n// - чтобы убедиться, что наш action доставлен в reducer нужно залогировать его до возврата нового state\r\n// -- const reducer = (state = initialState, action) => { console.log('Лог action в reducer:', action);\r\n//   return state; };\r\n\r\n('reducer for phonebook');\r\n\r\n// ? // note 9. reducer\r\n// - задаём дэфолтное(предыдущее) значение для initialState\r\n// - делаем switch с разными кейсами, определяем по свойству (action.type)\r\n// - если ни один из кейсов не подойдёт, прописываем default: return\r\n// - возвращаем в кейсе с именем новое значение = action.payload\r\n// - то же и с contactForm/Number\r\n// - деструктуризируем action на {type, payload}\r\n// - тут использовать можно все методы, что использовались с state (.map, .filter)\r\n\r\n// связываем нашу логику с компонентами -> index\r\n\r\n// ContactForm ->\r\n// ? // note 14. мы работаем от предыдущего, поэтому будем распылять свойства state\r\n// - распылять надо сначала { ...state, counter: 1 }\r\n// - если значение свойства объект, то распыляем и его {...state, counter: { ...state.counter, value: state.counter.value + payload }}\r\n// -- делаем это у каждого кейса\r\n// -- проверяем, чтобы в ContactForm -> mapStateToProps -> правильно сошлись пути значения пропсов\r\n\r\n// ? // note 15. после установки devtools\r\n// - добавляем настройки прослоек (стек функций между action и reducer)\r\n// -- import { createStore, applyMiddleware } from 'redux';\r\n// -- import { composeWithDevTools } from 'redux-devtools-extension';\r\n// --- прописываем после createStore(reducer, composeWithDevTools(...));\r\n// ---- в ... мы передаём applyMiddleware(...middleware)\r\n// ---- если middleware нет, передаём пустой массив applyMiddleware([])\r\n// --- или пустые тулзы createStore(reducer, composeWithDevTools());\r\n\r\n// ? // note 16. combineReducers ['RN18/9', '01:09:30'];\r\n// - import { combineReducers } from 'redux';\r\n// -- за разные свойства могут отвечать разные reducers\r\n// -- создаём переменную с отдельным объектом нашего стейта, чтобы в будущем использовать только этот кусочек\r\n// -- прописываем handleDataReducer специально для handleDataInitialState\r\n// -- первый reducer удаляем\r\n// -- const rootReducers = combineReducers({...}); комбинируем reducers\r\n// -- ... = handleData: handleDataReducer, какое есть свойство в state и какой метод за него отвечает\r\n\r\n// ? // note 17. дробим дальше ['RN18/9', '01:16:00'];\r\n// - можно каждому свойству свой reducer\r\n\r\n// ? // note 18. отдельная папка под все события и действия элемента\r\n// - redux/contact - это namespace\r\n// - redux/contact/contact-actioons.js\r\n// -- переносим всё из actions.js\r\n// -- меняем адрес импорта в ContactForm\r\n// - contact-reducer.js ->\r\n// -- переносим туда reducer по имени и номеру\r\n// -- импортируем reducer из contact-reducer.js\r\n// -- объединяем тут с rootReducer\r\n// -- его и закидываем в createStore(rootReducer)\r\n\r\n// ? // note 24. rootReducer\r\n// - import reducers\r\n// - связываем свойства state с помощью combineReducers({\r\n// - contacts: reducers.contact,\r\n// - filter: reducers.filter, })\r\n\r\n// ? // note 33. Redux Toolkit [RN18/10]\r\n// - npm install @reduxjs/toolkit\r\n// -- меняем import { createStore } from 'redux';\r\n// -- на import { configureStore } from '@reduxjs/toolkit';\r\n// --- теперь в store передаётся не ссылка, а объект настроек с обязательным свойством reducer:\r\n// --- devTools: false, пишем, если надо отключить, они теперь всегда включены\r\n// ---- но они не нужны в продакшине, поэтому включить их можно при условии { devTools: process.env.NODE_ENV === 'development' }\r\n// - если в reducer: {} передать сразу объект свойств, то combineReducers не нужен, он есть под капотом и сам всё обернёт\r\n\r\n// ? // note 34. стек прослоек middleware\r\n// - прослойки middleware - это набор ф-ций на пути action когда он диспатчится до reducer\r\n// - это именно стек и у него есть очерёдность\r\n// -- они вспомогательные и есть много готовых: redux - logger(логирует action в консоль)\r\n// --  npm i --save redux-logger\r\n// -- есл нужно показать дополнительные прослойки, то нужно подключить настройки дефолтных мидлваров\r\n// --- import {getDefaultMiddleware} from '@reduxjs/tooolkit';\r\n// --- подключаем доп. мидлвар import logger from 'redux-logger';\r\n// ---- запускаем и распушиваем дефолтные мидлвары, а потом доп.\r\n// ---- const middleware = [...getDefaultMiddleware(), logger];\r\n// -- передаём ссылку на мидлвары как значение свойства middleware в store\r\n// -- проверяем консоль при фильтрации\r\n\r\n// ***\r\n// выносим отдельно , папку contact и всё, что с ним связано\r\n// константы types\r\n\r\n//  * старое\r\n/*\r\nconst reducer = (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case 'contactForm/Name':\r\n            return { ...state, handleData: { ...state.handleData, name: payload} };\r\n            \r\n        case 'contactForm/Number':\r\n            return { ...state, handleData: { ...state.handleData, number: payload } };\r\n                \r\n        default:\r\n            return state;\r\n    }\r\n};\r\n*/\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\n// import { myAction, myAction2 } from './redux/actions';\r\nimport './index.css';\r\n\r\n// console.log(store);\r\n// console.log(store.getState());\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// ? // note 3.  store.js -> import store from './redux/store';\r\n// console.log(store) -> методы\r\n// - dispatch(action) - экшины доставляет в reduser\r\n// - getState() - ссылка на свойства state\r\n// -> actions.js\r\n\r\n// ? // note 5. actions.js -> import { myAction } from './redux/actions';\r\n// - console.log(store.dispatch(myAction)); - диспатчим наш action (в лог)\r\n// - store.dispatch(myAction) - диспатчим action\r\n// - Лог action в reducer: {type: \"@@redux/INITs.j.e.d.c.g\"} - это изначальное состояние, чтобы засетить начальный state, redux сам его делает при инициализации 1 раз, потому что у нас 1 reducer\r\n\r\n// console.log(myAction);\r\n// console.log(myAction2(5));\r\n// console.log(myAction2(10));\r\n// console.log(store.dispatch(myAction));\r\n// store.dispatch(myAction);\r\n// import { myAction, myAction2 } from './redux/actions';\r\n\r\n('dispatch for phonebook');\r\n\r\n// ? // note 10. npm install react-redux\r\n// - метод Provider обворачивает весь App и прокидывает state в контекст на любую глубину\r\n// -- import { Provider } from 'react-redux';\r\n// - Provider нужно передать ссылку на store={store} (store уже импортирован)\r\n\r\n// убираем state, где его использовали и методы -> ContactForm\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__3uusi\",\"ContactForm__form\":\"ContactForm_ContactForm__form__H-Tv2\",\"ContactForm__subtitle\":\"ContactForm_ContactForm__subtitle__3D54a\",\"ContactForm__text\":\"ContactForm_ContactForm__text__1xjLq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__WJzQc\",\"ContactList__form\":\"ContactList_ContactList__form__2LCc-\",\"contact\":\"ContactList_contact__1-rTq\",\"deleteBtn\":\"ContactList_deleteBtn__1Dyzl\"};"],"sourceRoot":""}